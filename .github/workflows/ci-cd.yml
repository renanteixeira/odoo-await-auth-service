name: 🚀 Odoo Auth Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run lint checks
      run: npm run lint --if-present || echo "No lint script found"
      
    - name: 🧪 Run unit tests
      run: npm run test:no-validation
      
    - name: 🐳 Test Docker build
      run: |
        docker build -t odoo-auth-service:test .
        docker run --rm -d --name test-container -p 3001:3001 \
          -e NODE_ENV=test \
          -e ODOO_BASE_URL=https://demo.odoo.com \
          -e ODOO_DB=demo \
          -e ODOO_PORT=443 \
          -e JWT_SECRET=test-secret-key \
          odoo-auth-service:test
        sleep 10
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        docker stop test-container

  # Separate job for testing with real Odoo (when available)
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build if demo instance is down
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🌐 Test Odoo Official Demo (if available)
      run: |
        echo "🔍 Testing connection to official Odoo demo instances..."
        MOCK_ODOO_TEST=true node test-odoo-official.js

  # Security audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level=moderate
      
    - name: 🕵️ Check for vulnerabilities
      run: |
        echo "Checking for high/critical vulnerabilities..."
        npm audit --audit-level=high --json | jq '.vulnerabilities | length' || echo "No audit available"

  # Coverage reporting - Currently disabled due to babel compatibility issues
  # coverage:
  #   name: 📊 Test Coverage
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: 📦 Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: 🔧 Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x
  #       cache: 'npm'
        
  #   - name: 📥 Install dependencies
  #     run: npm ci
      
  #   - name: 📊 Generate coverage report
  #     run: npm run test:coverage
      
  #   - name: 📤 Upload coverage reports
  #     uses: codecov/codecov-action@v4
  #     with:
  #       file: ./coverage/lcov.info
  #       flags: unittests
  #       name: codecov-umbrella
  #       fail_ci_if_error: false

  # Build and publish Docker image (on main branch)
  docker:
    name: 🐳 Docker Build & Publish
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: renanteixeira/odoo-auth-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging (optional)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy notification
      run: |
        echo "🎉 Ready for deployment!"
        echo "Docker image built and available at: renanteixeira/odoo-auth-service:main"
        echo "Use: docker run -p 3001:3001 --env-file .env renanteixeira/odoo-auth-service:main"
