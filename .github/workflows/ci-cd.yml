name: 🚀 Odoo Auth Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test

jobs:
  # Basic tests (no Odoo dependency)
  test:
    name: 🧪 Basic Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run lint checks
      run: npm run lint --if-present || echo "No lint script found"
      
    - name: 🧪 Run unit tests
      run: npm run test:no-validation
      
    - name: 🐳 Test Docker build
      run: |
        docker build -t odoo-auth-service:test .
        docker run --rm -d --name test-container -p 3001:3001 \
          -e NODE_ENV=test \
          -e ODOO_BASE_URL=https://demo.odoo.com \
          -e ODOO_DB=demo \
          -e ODOO_PORT=443 \
          -e JWT_SECRET=test-secret-key \
          odoo-auth-service:test
        sleep 10
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        docker stop test-container

  # Security audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level=moderate
      
    - name: 🕵️ Check for vulnerabilities
      run: |
        echo "Checking for high/critical vulnerabilities..."
        npm audit --audit-level=high --json | jq '.vulnerabilities | length' || echo "No audit available"

  # Multi-version Odoo compatibility testing
  multi-version-test:
    name: 🔄 Test Odoo ${{ matrix.odoo-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        odoo-version: ['12.0', '13.0', '14.0', '15.0', '16.0', '17.0', '18.0', '19.0']
      fail-fast: false

    steps:
    - name: 📦 Checkout odoo-await-auth-service
      uses: actions/checkout@v4
      with:
        path: auth-service
        
    - name: 📦 Checkout odoo-await for testing infrastructure
      uses: actions/checkout@v4
      with:
        repository: renanteixeira/odoo-await
        path: odoo-await
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: auth-service/package-lock.json
        
    - name: 📥 Install dependencies
      run: |
        cd auth-service
        npm ci
        
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🚀 Start Odoo ${{ matrix.odoo-version }} environment
      run: |
        cd odoo-await
        version="${{ matrix.odoo-version }}"
        version_num="${version%.*}"
        
        echo "🚀 Starting environment for Odoo ${version}..."
        
        # Start required services
        docker compose up -d postgres wkhtml
        
        # Wait for PostgreSQL
        echo "⏳ Waiting for PostgreSQL..."
        timeout 90 bash -c "until docker compose exec postgres pg_isready -U postgres >/dev/null 2>&1; do sleep 2; done"
        
        # Setup database user
        docker compose exec postgres psql -U postgres -c "SELECT 1 FROM pg_roles WHERE rolname='odoo'" | grep -q 1 || {
          docker compose exec postgres psql -U postgres -c "CREATE USER odoo WITH CREATEDB PASSWORD 'odoo';"
        }
        
        # Create database for this version
        docker compose exec postgres psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "odoo${version_num}" || {
          docker compose exec postgres createdb -U postgres -O odoo odoo${version_num}
        }
        
        # Quick Odoo initialization
        timeout 300 docker compose run --rm odoo${version_num} odoo \
          --database=odoo${version_num} \
          --db_user=odoo \
          --db_password=odoo \
          --db_host=postgres \
          --init=base \
          --stop-after-init \
          --without-demo=all
        
        # Start Odoo service
        docker compose up -d odoo${version_num}

    - name: Wait for Odoo ${{ matrix.odoo-version }} to be ready
      run: |
        version_num="${{ matrix.odoo-version }}"
        version_num="${version_num%.*}"
        port="${version_num}069"
        
        echo "⏳ Waiting for Odoo ${{ matrix.odoo-version }} on port $port..."
        timeout 180 bash -c "until curl -sf http://localhost:$port/web/database/selector >/dev/null; do sleep 3; echo -n '.'; done"
        echo "✅ Odoo ${{ matrix.odoo-version }} is ready!"

    - name: 🧪 Test auth service against Odoo ${{ matrix.odoo-version }}
      timeout-minutes: 10
      run: |
        cd auth-service
        version_num="${{ matrix.odoo-version }}"
        version_num="${version_num%.*}"
        port="${version_num}069"
        
        echo "🧪 Testing auth service against Odoo ${{ matrix.odoo-version }} on port $port"
        
        # Create log file for this version
        log_file="test-results-odoo${version_num}.log"
        echo "📝 Starting tests for Odoo ${{ matrix.odoo-version }} at $(date)" > "$log_file"
        echo "Environment: ODOO_BASE_URL=http://localhost:$port, ODOO_DB=odoo${version_num}" >> "$log_file"
        echo "===================================================================" >> "$log_file"
        
        # Run tests with environment variables
        if ODOO_BASE_URL="http://localhost:$port" \
           ODOO_DB="odoo${version_num}" \
           ODOO_PORT="$port" \
           ODOO_USER="admin" \
           ODOO_PW="admin" \
           JWT_SECRET="test-jwt-secret-odoo${version_num}" \
           PORT="3001" \
           NODE_ENV="test" \
           npm run test:no-validation >> "$log_file" 2>&1; then
          echo "✅ PASSED" >> "$log_file"
          echo "✅ Odoo ${{ matrix.odoo-version }} - PASSED all tests!"
        else
          echo "❌ FAILED" >> "$log_file"
          echo "❌ Odoo ${{ matrix.odoo-version }} - FAILED tests!"
          exit 1
        fi
        
        echo "===================================================================" >> "$log_file"
        echo "Test completed for Odoo ${{ matrix.odoo-version }} at $(date)" >> "$log_file"
        
    - name: 📤 Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-odoo-${{ matrix.odoo-version }}
        path: auth-service/test-results-*.log
        retention-days: 30
        
    - name: 🧹 Cleanup services
      if: always()
      run: |
        cd odoo-await
        echo "🧹 Cleaning up services for Odoo ${{ matrix.odoo-version }}..."
        docker compose down --volumes --remove-orphans || true  # Summary job to ensure all versions passed
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [test, security, multi-version-test]
    if: always()
    
    steps:
    - name: 📊 Generate test summary
      run: |
        echo "## 🚀 Odoo Auth Service CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Basic Tests" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ Unit tests, linting, and Docker build passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Basic tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### � Multi-Version Odoo Compatibility" >> $GITHUB_STEP_SUMMARY
        echo "📊 Tested against Odoo versions: 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.multi-version-test.result }}" == "success" ]]; then
          echo "✅ All Odoo versions compatible!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some Odoo versions failed - check artifacts for details" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.security.result }}" == "success" ]]; then
          echo "✅ No high/critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Overall status
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.multi-version-test.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 SUCCESS! All checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "STATUS=success" >> $GITHUB_ENV
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ❌ FAILURE! Some checks failed." >> $GITHUB_STEP_SUMMARY
          echo "STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi

  # Build and publish Docker image (on main branch)
  docker:
    name: 🐳 Docker Build & Publish
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: renanteixeira/odoo-auth-service
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=Odoo Auth Service
          org.opencontainers.image.description=Secure microservice for Odoo authentication with JWT tokens
          org.opencontainers.image.vendor=Renan Teixeira
          org.opencontainers.image.licenses=MIT
          
    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging (optional)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy notification
      run: |
        echo "🎉 Ready for deployment!"
        echo "Docker image built and available at: renanteixeira/odoo-auth-service:latest"
        echo "Use: docker run -p 3001:3001 --env-file .env renanteixeira/odoo-auth-service:latest"
